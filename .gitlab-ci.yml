image: docker:latest

stages:
  - build-manager
  - build-data_provider
  - build-proxy
  - deploy-stack
  - integration-tests

services:
  - docker:dind

variables:
  CI_REGISTRY: 'registry.gitlab.com'
  CI_REGISTRY_IMAGE_MANAGER: 'registry.gitlab.com/dreampathsprojekt/whalefisher/whalefisher-manager'
  CI_REGISTRY_IMAGE_DATA_PROVIDER: 'registry.gitlab.com/dreampathsprojekt/whalefisher/whalefisher-data_provider'
  CI_REGISTRY_IMAGE_NGINX: 'registry.gitlab.com/dreampathsprojekt/whalefisher/nginx-proxy'
  VERSION: '0.9.2.3'
  NGINX_VERSION: '0.2'

before_script:
  - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY

build-manager:
  stage: build-manager
  tags:
    - docker
  script:
    - docker build -t "whalefisher-manager":"$VERSION" ./whalefisher-manager/
    - docker tag "whalefisher-manager":"$VERSION" "$CI_REGISTRY_IMAGE_MANAGER":"$VERSION"
    - docker tag "whalefisher-manager":"$VERSION" "$CI_REGISTRY_IMAGE_MANAGER":latest
    - docker push "$CI_REGISTRY_IMAGE_MANAGER":"$VERSION"
    - docker push "$CI_REGISTRY_IMAGE_MANAGER":latest
  only:
    - master
  when: manual

build-data_provider:
  stage: build-data_provider
  tags:
    - docker
  script:
    - docker build -t "whalefisher-data_provider":"$VERSION" ./whalefisher-data_provider/
    - docker tag "whalefisher-data_provider":"$VERSION" "$CI_REGISTRY_IMAGE_DATA_PROVIDER":"$VERSION"
    - docker tag "whalefisher-data_provider":"$VERSION" "$CI_REGISTRY_IMAGE_DATA_PROVIDER":latest
    - docker push "$CI_REGISTRY_IMAGE_DATA_PROVIDER":"$VERSION"
    - docker push "$CI_REGISTRY_IMAGE_DATA_PROVIDER":latest
  only:
    - master
  when: manual

build-proxy:
  stage: build-proxy
  tags:
    - docker
  script:
    - docker build -t "nginx-proxy":"$VERSION" ./nginx-proxy/
    - docker tag "nginx-proxy":"$VERSION" "$CI_REGISTRY_IMAGE_NGINX":"$NGINX_VERSION"
    - docker tag "nginx-proxy":"$VERSION" "$CI_REGISTRY_IMAGE_NGINX":latest
    - docker push "$CI_REGISTRY_IMAGE_NGINX":"$NGINX_VERSION"
    - docker push "$CI_REGISTRY_IMAGE_NGINX":latest
  only:
    - master
  when: manual

deploy-stack:
  stage: deploy-stack
  tags:
    - docker
  script:
    - docker stack deploy -c whale-fisher.yml whale
  only:
    - master
  when: manual

integration-tests:
  stage: integration-tests
  tags:
    - docker
  script:
    - echo "Test manager routes"
    - response_manager=$(curl -u demo:demo http://localhost --show-error --head | grep HTTP | awk '{print $2}')
    - "[[ $response_manager == 200 ]] && route_manager=PASS || route_manager=FAIL"
    - echo "Test manager services"
    - response_service=$(curl -u demo:demo http://localhost/service --show-error --head | grep HTTP | awk '{print $2}')
    - "[[ $response_service == 200 ]] && service_manager=PASS || service_manager=FAIL"
    - echo "Test nginx status at 8090"
    - response_nginx=$(curl http://localhost:8090/nginx_status --show-error --head | grep HTTP | awk '{print $2}')
    - "[[ $response_nginx == 200 ]] && nginx=PASS || nginx=FAIL"
    - echo "Test data-provider routes"
    - response_provider=$(curl http://localhost:8080/ --show-error --head | grep HTTP | awk '{print $2}')
    - "[[ $response_provider == 200 ]] && route_provider=PASS || route_provider=FAIL"
    - echo "Test data-provider containers"
    - response_container=$(curl http://localhost:8080/container --show-error --head | grep HTTP | awk '{print $2}')
    - "[[ $response_container == 200 ]] && container_provider=PASS || container_provider=FAIL"
    - "[[ $route_manager == PASS ]] && echo 'Manager Routes: PASS' || exit 1"
    - "[[ $service_manager == PASS ]] && echo 'Manager Services: PASS' || exit 1"
    - "[[ $nginx == PASS ]] && echo 'NGINX: PASS' || exit 1"
    - "[[ $route_provider == PASS ]] && echo 'Data Provider Routes: PASS' || exit 1"
    - "[[ $container_provider == PASS ]] && echo 'Data Provider Containers: PASS' || exit 1"
  only:
    - master
  when: manual