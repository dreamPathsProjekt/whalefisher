version: "3.3"

    # beta 6 exposes just a flask route
    # beta 8 correctly exposes json routes - logs undefined
    # beta 13.2 streams out logs - but stuck endpoint
    # beta 16 return jsonified list (compact view)
    # beta 16.1 returns json {name:, linenr:}
    # beta 16.2 strict slashes=False
    # beta 16.3 keep both behaviours in diff urls
    # beta 16.6 tasks with desired: running
    # beta 17.2 decorate client as resource, client info
    # 0.2 as 17.2
    # 0.2.1 include new setup.py version
    # 0.2.1.1 test other log than self - occasional timeout still exists on all urls as well (not only logs),
    # solution: may need to remove ::1     localhost ip6-localhost ip6-loopback from /etc/hosts
    # 0.2.3 include node labels, availability
    # 0.2.4 Add tasks by service name
    # 0.2.4.1 Add service route
    # 0.2.5 Add get tasks by service name route, 0.2.5.1 fix
    # 0.2.5.2 Return empty task list
    # 0.2.6 Refine search services by name, tasks
    # 0.2.6.1 Fix list routes
    # 0.2.6.2 Add active node by getting environ['DOCKER_NODE']
    # 0.2.7 Fix route to current nodename
    # 0.2.7.1 Add Requests module, 0.2.7.2 fix port
    # 0.2.7.3 Add tasks json route and middleware
    # 0.2.7.4 Fix empty list bug in tasks
    # 0.2.8 Add fields to task, get node by id, 0.2.8.1 fix decorator
    # 0.2.8.2 Add Slot check for global services

    # 0.3 Split into data-provider and manager services
    # 0.3.0 test data-providers from manager, 0.3.1 fix ips
    # 0.3.2 Provide extensive node test from manager
    # 0.3.3 Add container/id/logs routes on data-provider
    # 0.3.4 Add stream log route to data-provider, 0.3.4.1, 0.3.4.2, 0.3.4.3, 0.3.4.4
    # 0.3.5 Add mimetype=text/event-stream
    # 0.3.6 Add tail/lines route to data-provider
    # 0.3.6.1 Use json.dumps() on streams, 0.3.6.2 fix formatting
    # 0.3.7 introduce timeouts, 0.3.7.1
    # 0.3.7.2 threaded=True for data-provider
    # 0.3.7.5 test stream request from manager
    # 0.3.7.6 Add reentrant iter_lines hack
    # 0.3.7.7 Test manager with iter_content()
    # 0.3.7.8 iter content with decoding and chunk size = None, 0.3.7.9
    # 0.3.8 format chars in iter content, 0.3.8.1
    #   Both iter_lines and iter_content lose data

    # 0.4 Setup.py install eventlet, flask-socketio, 0.4.1 fix app.run()
    # 0.4.2 Add threaded server
    # 0.4.3 Add async mode on SocketIO init
    # 0.5 Include socketIO_client

    # 0.5.1 Streaming requests succeeded without sockets, using chunk size=1024
    # 0.5.2 Test again using iter_lines -> Success
    # 0.5.2.1, 0.5.3 Test with text/plain instead of text/event-stream -> Success with Firefox, Edge
    # 0.5.4 Add teststream route for manager
    # 0.5.5 Add route tasks_by_id for manager
    # 0.5.6 Test node_ip, 0.5.6.2 Fix Leader key not exists => Fixed
    # 0.5.7 Implement return container id from task id & service name, 0.5.7.1 Return not found
    # 0.5.8 Add routes for logs, /compact, /stream, /tail/:lines, 0.5.8.1 Resize chunk size to 256 for tail
    # 0.5.9 Clean up docker_provider get container by task function, provider_port as constant
    # 0.5.9.1 Data provider port as env variable
    # 0.5.9.2 Chunk size of stream readers to 64 (smaller logs), 0.5.9.3 size=1 test
    # 0.5.9.4 Install curl on manager
    # 0.5.10 Add version=auto on docker client
    # 0.5.11 Add container.logs logs=True parameter, 0.5.12, 0.5.13

    # Reminder to change data-provider port on each environment

    # 0.3 or 0.4 Import pyld (setup.py) [Not needed] ,from pyld import jsonld, to implement HateOas

services:

  whalefisher-manager:
    image: registry.dream:5001/whalefisher-manager:0.5.13
    deploy:
      replicas: 1
    environment:
      - DOCKER_NODE={{.Node.Hostname}}
      - DATA_PROVIDER_PORT=8080
    ports:
      - "80:5000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

  whalefisher-data_provider:
    image: registry.dream:5001/whalefisher-data_provider:0.5.13
    deploy:
      mode: global
      endpoint_mode: dnsrr
    environment:
      - DOCKER_NODE={{.Node.Hostname}}
    ports:
      - target: 5000
        published: 8080
        protocol: tcp
        mode: host
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock